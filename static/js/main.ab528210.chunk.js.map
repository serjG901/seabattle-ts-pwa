{"version":3,"sources":["board/boardSlice.ts","app/store.tsx","board/getArrayFunctions.ts","common/TextWithExplane.tsx","board/view/Cell.tsx","board/playerColorAndShip.ts","board/view/ShipView.tsx","board/view/Sea.tsx","board/connect/SeaConnect.tsx","common/Button.tsx","board/connect/PlayAgainConnect.tsx","board/view/Game.tsx","board/connect/GameConnect.tsx","board/view/GameName.tsx","common/Select.tsx","board/connect/PlayConnect.tsx","board/view/GameSettings.tsx","board/connect/GameSettingsConnect.tsx","board/view/Rulles.tsx","board/view/Board.tsx","board/connect/BoardConnect.tsx","common/Background.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["boardSlice","createSlice","name","initialState","selectSeaSize","seaSize","numberOfShips","play","currentPlayer","winner","player1","move","ships","destroyedShips","player2","reducers","reset","state","window","navigator","vibrate","action","payload","movePlayer1","includes","filter","ship","push","length","shipsPlayer1","movePlayer2","shipsPlayer2","actions","selectBoard","board","configureStore","reducer","boardReducer","getBoardArray","Array","from","v","k","getRandomShip","Math","round","random","getShipsPlayer","i","TextWithExplane","explane","union","text","color","className","Cell","id","disabled","onTarget","destroyed","style","enabledStyle","disabledStyle","type","onClick","fontFamily","textColorsPlayer1","textColorsPlayer2","playerColorText","floor","playerShipDirection","ShipView","direction","shipStyle","bgShip","seaCell","Sea","player","oponent","map","SeaConnect","seaOwner","useSelector","dispatch","useDispatch","Button","PlayAgainConnect","Game","undefined","GameConnect","useEffect","GameName","Select","labelText","defaultValue","selectArray","setValue","viewModificator","item","Number","PlayConnect","firstPlayer","GameSettings","seaSizeArray","setSeaSize","numberOfShipsArray","setNumberOfShips","size","number","GameSettingsConnect","min","max","value","Rulles","useState","isOpen","setIsOpen","hidden","Board","BoardConnect","Background","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ab528210.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface KeyStringInterface {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface BoardInterface extends KeyStringInterface {\r\n  selectSeaSize: Array<number>;\r\n  seaSize: number;\r\n  numberOfShips: number;\r\n  play: boolean;\r\n  currentPlayer: string | null;\r\n  winner: string | null;\r\n  player1: PlayerInterface;\r\n  player2: PlayerInterface;\r\n}\r\n\r\ninterface StateInterface {\r\n  board: BoardInterface;\r\n}\r\n\r\nfunction initialBoard(): BoardInterface {\r\n  return {\r\n    selectSeaSize: [2, 3, 4, 5, 6],\r\n    seaSize: 3,\r\n    numberOfShips: 3,\r\n    play: false,\r\n    currentPlayer: null,\r\n    winner: null,\r\n    player1: {\r\n      name: \"player1\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n    player2: {\r\n      name: \"player2\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport const boardSlice = createSlice({\r\n  name: \"board\",\r\n  initialState: initialBoard(),\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.currentPlayer = null;\r\n      state.play = false;\r\n      state.winner = null;\r\n      state.player1 = {\r\n        name: \"player1\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      state.player2 = {\r\n        name: \"player2\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      window.navigator.vibrate([100]);\r\n    },\r\n    seaSize: (state, action) => {\r\n      state.seaSize = action.payload;\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    numberOfShips: (state, action) => {\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    play: (state, action) => {\r\n      state.play = true;\r\n      state.currentPlayer = action.payload;\r\n      window.navigator.vibrate([100]);\r\n    },\r\n    winner: (state, action) => {\r\n      state.winner = action.payload;\r\n    },\r\n    movePlayer1: (state, action) => {\r\n      state.player1.move = [...state.player1.move, action.payload];\r\n      window.navigator.vibrate([100]);\r\n      if (state.player2.ships.includes(action.payload)) {\r\n        state.player2.ships = state.player2.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player2.destroyedShips.push(action.payload);\r\n        window.navigator.vibrate([50, 50, 200]);\r\n      }\r\n      if (state.player2.ships.length === 0) {\r\n        state.winner = \"player1\";\r\n        window.navigator.vibrate([\r\n          100,\r\n          50,\r\n          100,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          100,\r\n        ]);\r\n      }\r\n      state.currentPlayer = \"player2\";\r\n    },\r\n    shipsPlayer1: (state, action) => {\r\n      state.player1.ships = action.payload;\r\n    },\r\n    movePlayer2: (state, action) => {\r\n      state.player2.move = [...state.player2.move, action.payload];\r\n      window.navigator.vibrate([100]);\r\n      if (state.player1.ships.includes(action.payload)) {\r\n        state.player1.ships = state.player1.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player1.destroyedShips.push(action.payload);\r\n        window.navigator.vibrate([50, 50, 200]);\r\n      }\r\n      if (state.player1.ships.length === 0) {\r\n        state.winner = \"player2\";\r\n        window.navigator.vibrate([\r\n          100,\r\n          50,\r\n          100,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          500,\r\n          50,\r\n          100,\r\n        ]);\r\n      }\r\n      state.currentPlayer = \"player1\";\r\n    },\r\n    shipsPlayer2: (state, action) => {\r\n      state.player2.ships = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  seaSize,\r\n  numberOfShips,\r\n  play,\r\n  winner,\r\n  movePlayer1,\r\n  shipsPlayer1,\r\n  movePlayer2,\r\n  shipsPlayer2,\r\n} = boardSlice.actions;\r\n\r\nexport const selectBoard = (state: StateInterface) => state.board;\r\n\r\nexport default boardSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport boardReducer from \"../board/boardSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  }\r\n});\r\n","export function getBoardArray(seaSize: number) {\r\n  const boardArray = Array.from({ length: seaSize * seaSize }, (v, k) => k + 1);\r\n  return boardArray;\r\n}\r\n\r\nfunction getRandomShip(seaSize: number) {\r\n  const ship = Math.round(seaSize * seaSize * Math.random());\r\n  return ship !== 0 ? ship : 1;\r\n}\r\n\r\nexport function getShipsPlayer(numberOfShips: number, seaSize: number) {\r\n  let ships: Array<number> = [];\r\n  for (let i = 1; i <= numberOfShips; i++) {\r\n    let ship;\r\n    do {\r\n      ship = getRandomShip(seaSize);\r\n    } while (ships.includes(ship));\r\n    ships = [...ships, ship];\r\n  }\r\n  return ships;\r\n}\r\n\r\nexport function getShipsArray(min: number, max: number) {\r\n  const shipsArray = Array.from({ length: max - min + 1 }, (v, k) => k + min);\r\n  return shipsArray;\r\n}\r\n","interface TextWithExplaneInterface {\r\n  explane: string;\r\n  union: string;\r\n  text: string | null;\r\n  color?: string | undefined;\r\n}\r\n\r\nexport function TextWithExplane({\r\n  explane,\r\n  union,\r\n  text,\r\n  color = \"text-red-500\",\r\n}: TextWithExplaneInterface) {\r\n  return (\r\n    <div className=\"italic font-bold text-gray-400\">\r\n      <p className={`${color}`}>{text}</p>{\" \"}\r\n      <p>\r\n        {explane}\r\n        {union}{\" \"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","interface CellInterface {\r\n  id: number;\r\n  disabled: boolean;\r\n  onTarget: (id: number) => void;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport function Cell({ id, disabled, onTarget, destroyed }: CellInterface) {\r\n  const style = `\r\n    h-12\r\n    w-full\r\n    border \r\n    border-solid \r\n    border-blue-900\r\n    text-4xl\r\n    `;\r\n\r\n  const enabledStyle = `\r\n    ${style} text-blue-900\r\n    cursor-pointer \r\n    bg-blue-500 \r\n    hover:bg-red-500 \r\n    `;\r\n  const disabledStyle = `\r\n    ${style}\r\n    text-blue-500\r\n    cursor-not-allowed\r\n    ${destroyed ? \"\" : \"bg-blue-900\"}\r\n    `;\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={disabled ? disabledStyle : enabledStyle}\r\n        type=\"button\"\r\n        onClick={() => onTarget(id)}\r\n        disabled={disabled}\r\n      >\r\n        {destroyed ? (\r\n          <span className=\"text-blue-900\">X</span>\r\n        ) : !disabled ? (\r\n          <span>?</span>\r\n        ) : (\r\n          <span style={{ fontFamily: \"sans-serif\" }}>\r\n            ~\r\n          </span>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","interface StringStringInterface {\r\n  [key: string]: string;\r\n}\r\n\r\nconst textColorsPlayer1: Array<string> = [\r\n  \"text-green-700\",\r\n  \"text-pink-700\",\r\n];\r\n\r\nconst textColorsPlayer2: Array<string> = [\r\n  \"text-yellow-700\",\r\n  \"text-purple-700\",\r\n];\r\n\r\nexport const playerColorText: StringStringInterface = {\r\n  player1: textColorsPlayer1[Math.floor(Math.random() * textColorsPlayer1.length)],\r\n  player2: textColorsPlayer2[Math.floor(Math.random() * textColorsPlayer2.length)],\r\n};\r\n\r\nexport const playerShipDirection: StringStringInterface = {\r\n  player1: \"right-0\",\r\n  player2: \"left-0\",\r\n};\r\n","interface ShipViewInterface {\r\n  direction: string;\r\n}\r\n\r\nexport function ShipView({ direction }: ShipViewInterface) {\r\n  const shipStyle = `\r\n    absolute \r\n    w-1/5 \r\n    h-1/5 \r\n    bg-blue-900 \r\n    `;\r\n\r\n  return (\r\n    <>\r\n      <div className={`top-0 ${shipStyle} ${direction}`}></div>\r\n      <div className={`bottom-0 ${shipStyle} ${direction}`}></div>\r\n    </>\r\n  );\r\n}\r\n","import { getBoardArray } from \"../getArrayFunctions\";\r\nimport { Cell } from \"./Cell\";\r\nimport { playerColorText, playerShipDirection } from \"../playerColorAndShip\";\r\nimport { ShipView } from \"./ShipView\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface SeaInterface {\r\n  seaSize: number;\r\n  currentPlayer: string | null;\r\n  player: PlayerInterface;\r\n  oponent: PlayerInterface;\r\n  onTarget: (id: number) => void;\r\n}\r\n\r\nconst bgShip: { [key: string]: string } = {\r\n  \"text-green-700\": \"bg-green-700\",\r\n  \"text-pink-700\": \"bg-pink-700\",\r\n  \"text-yellow-700\": \"bg-yellow-700\",\r\n  \"text-purple-700\": \"bg-purple-700\",\r\n};\r\n\r\nconst seaCell: { [key: string]: string } = {\r\n  \"2\": \"w-1/2\",\r\n  \"3\": \"w-1/3\",\r\n  \"4\": \"w-1/4\",\r\n  \"5\": \"w-1/5\",\r\n  \"6\": \"w-1/6\",\r\n};\r\n\r\nexport function Sea({\r\n  seaSize,\r\n  currentPlayer,\r\n  player,\r\n  oponent,\r\n  onTarget,\r\n}: SeaInterface) {\r\n  return (\r\n    <div\r\n      className={`w-1/2 px-2 pb-2 bg-blue-900 ${playerColorText[player.name]}`}\r\n    >\r\n      <p>\r\n        {player.name} / {player.ships.length} left\r\n      </p>\r\n      <div className={`flex flex-wrap`}>\r\n        {getBoardArray(seaSize).map((id) => {\r\n          return (\r\n            <div\r\n              key={id}\r\n              className={`\r\n                relative \r\n                ${seaCell[seaSize]} \r\n                ${\r\n                  player.destroyedShips.includes(id)\r\n                    ? `${bgShip[playerColorText[player.name]]}`\r\n                    : null\r\n                }`}\r\n            >\r\n              {player.destroyedShips.includes(id) ? (\r\n                <ShipView direction={playerShipDirection[player.name]} />\r\n              ) : null}\r\n              <Cell\r\n                id={id}\r\n                disabled={\r\n                  currentPlayer === player.name || oponent.move.includes(id)\r\n                }\r\n                onTarget={onTarget}\r\n                destroyed={player.destroyedShips.includes(id)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { movePlayer1, movePlayer2, selectBoard } from \"../boardSlice\";\r\nimport { Sea } from \"../view/Sea\";\r\n\r\ninterface SeaConnectInterface {\r\n  seaOwner: string;\r\n}\r\n\r\nexport function SeaConnect({ seaOwner }: SeaConnectInterface) {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleTarget(id: number) {\r\n    if (board.currentPlayer === \"player1\") {\r\n      dispatch(movePlayer1(id));\r\n    }\r\n    if (board.currentPlayer === \"player2\") {\r\n      dispatch(movePlayer2(id));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sea\r\n      seaSize={board.seaSize}\r\n      currentPlayer={board.currentPlayer}\r\n      player={board[seaOwner]}\r\n      oponent={board[seaOwner === \"player1\" ? \"player2\" : \"player1\"]}\r\n      onTarget={handleTarget}\r\n    />\r\n  );\r\n}\r\n","interface ButtonInterface {\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport function Button({ text, onClick }: ButtonInterface) {\r\n  const style = `\r\n    py-2\r\n    px-4 \r\n    bg-blue-500 \r\n    hover:bg-blue-400 \r\n    text-blue-900\r\n    shadow-none\r\n    hover:shadow-md\r\n    cursor-pointer\r\n    focus:outline-none \r\n    focus:shadow-outline\r\n    `;\r\n\r\n  return (\r\n    <button onClick={onClick} className={style}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import { useDispatch } from \"react-redux\";\r\nimport { reset } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayAgainConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleReset() {\r\n    dispatch(reset());\r\n  }\r\n\r\n  return <Button text=\"PLAY AGAIN\" onClick={handleReset} />;\r\n}\r\n","import { TextWithExplane } from \"../../common/TextWithExplane\";\r\nimport { SeaConnect } from \"../connect/SeaConnect\";\r\nimport { PlayAgainConnect } from \"../connect/PlayAgainConnect\";\r\nimport { playerColorText } from \"../playerColorAndShip\";\r\n\r\ninterface GameInterface {\r\n  winner: string | null;\r\n  currentPlayer: string | null;\r\n}\r\n\r\nexport function Game({ winner, currentPlayer }: GameInterface) {\r\n  return winner ? (\r\n    <>\r\n      <TextWithExplane\r\n        explane=\"WIN\"\r\n        union=\"!\"\r\n        text={winner}\r\n        color={currentPlayer !== null ? playerColorText[winner] : undefined}\r\n      />\r\n      <br />\r\n      <PlayAgainConnect />\r\n    </>\r\n  ) : (\r\n    <div className=\"flex flex-col\">\r\n      <TextWithExplane\r\n        explane=\"ATTACKS\"\r\n        union=\"!\"\r\n        text={currentPlayer}\r\n        color={\r\n          currentPlayer !== null ? playerColorText[currentPlayer] : undefined\r\n        }\r\n      />\r\n      <div className=\"flex w-screen justify-center\">\r\n        <SeaConnect seaOwner={\"player1\"} />\r\n        <SeaConnect seaOwner={\"player2\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard, shipsPlayer1, shipsPlayer2 } from \"../boardSlice\";\r\nimport { getShipsPlayer } from \"../getArrayFunctions\";\r\nimport { Game } from \"../view/Game\";\r\n\r\nexport function GameConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(shipsPlayer1(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n    dispatch(shipsPlayer2(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n  }, [dispatch, board.numberOfShips, board.seaSize]);\r\n\r\n  return <Game currentPlayer={board.currentPlayer} winner={board.winner} />;\r\n}\r\n","import { playerColorText } from \"../playerColorAndShip\";\r\n\r\nexport function GameName() {\r\n  return (\r\n    <div className=\"text-7xl italic\">\r\n      <span className={`${playerColorText.player1}`}>SEA</span>\r\n      <span className={`${playerColorText.player2}`}>BATTLE</span>\r\n    </div>\r\n  );\r\n}\r\n","interface SelectInterface {\r\n  labelText: string;\r\n  defaultValue: number;\r\n  selectArray: Array<number>;\r\n  setValue: (value: number) => void;\r\n  viewModificator: (value: number) => string;\r\n}\r\n\r\nexport function Select({\r\n  labelText,\r\n  defaultValue,\r\n  selectArray,\r\n  setValue,\r\n  viewModificator,\r\n}: SelectInterface) {\r\n  function handleClick(value: number) {\r\n    setValue(Number(value));\r\n  }\r\n\r\n  return (\r\n    <div className=\"pb-2\">\r\n      <div className=\"flex justify-evenly w-80\">\r\n        {selectArray.map((item: number) => {\r\n          return (\r\n            <div\r\n              key={item}\r\n              className={`flex-1 cursor-pointer ${\r\n                item === defaultValue\r\n                  ? \"text-blue-800 bg-blue-500 hover:bg-blue-500 shadow-md transform scale-125\"\r\n                  : \"text-blue-500\"\r\n              }`}\r\n              onClick={() => handleClick(item)}\r\n            >\r\n              {viewModificator(item)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <p className=\"text-gray-400 border-t-2 border-solid border-blue-500\">{labelText}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { useDispatch } from \"react-redux\";\r\nimport { play } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handlePlay() {\r\n    const firstPlayer = Math.random() > 0.5 ? \"player1\" : \"player2\";\r\n    dispatch(play(firstPlayer));\r\n  }\r\n\r\n  return <Button text=\"PLAY\" onClick={handlePlay} />;\r\n}\r\n","import { Select } from \"../../common/Select\";\r\nimport { PlayConnect } from \"../connect/PlayConnect\";\r\n\r\ninterface GameSettimngsInterface {\r\n  seaSize: number;\r\n  seaSizeArray: Array<number>;\r\n  setSeaSize: (value: number) => void;\r\n  numberOfShips: number;\r\n  numberOfShipsArray: Array<number>;\r\n  setNumberOfShips: (value: number) => void;\r\n}\r\n\r\nexport function GameSettings({\r\n  seaSize,\r\n  seaSizeArray,\r\n  setSeaSize,\r\n  numberOfShips,\r\n  numberOfShipsArray,\r\n  setNumberOfShips,\r\n}: GameSettimngsInterface) {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <Select\r\n        labelText=\"Field size\"\r\n        defaultValue={seaSize}\r\n        selectArray={seaSizeArray}\r\n        setValue={setSeaSize}\r\n        viewModificator={(size: number) => `${size}x${size}`}\r\n      />\r\n      <Select\r\n        labelText=\"Number of ships\"\r\n        defaultValue={numberOfShips}\r\n        selectArray={numberOfShipsArray}\r\n        setValue={setNumberOfShips}\r\n        viewModificator={(number: number) => `${number}`}\r\n      />\r\n      <PlayConnect />\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { seaSize, numberOfShips } from \"../boardSlice\";\r\nimport { GameSettings } from \"../view/GameSettings\";\r\nimport { getShipsArray } from \"../getArrayFunctions\";\r\n\r\nexport function GameSettingsConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  const numberOfShipsArray = getShipsArray(\r\n    board.seaSize,\r\n    Math.round((board.seaSize * board.seaSize) / 2)\r\n  );\r\n\r\n  function setSeaSize(value: number) {\r\n    dispatch(seaSize(value));\r\n  }\r\n\r\n  function setNumberOfShips(value: number) {\r\n    dispatch(numberOfShips(value));\r\n  }\r\n\r\n  return (\r\n    <GameSettings\r\n      seaSize={board.seaSize}\r\n      seaSizeArray={board.selectSeaSize}\r\n      setSeaSize={setSeaSize}\r\n      numberOfShips={board.numberOfShips}\r\n      numberOfShipsArray={numberOfShipsArray}\r\n      setNumberOfShips={setNumberOfShips}\r\n    />\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport function Rulles() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const style = `\r\n    text-gray-400\r\n    cursor-pointer\r\n    `;\r\n  return (\r\n    <div>\r\n      <span\r\n        className={isOpen ? style : `underline ${style}`}\r\n        onClick={() => {\r\n          setIsOpen(!isOpen);\r\n        }}\r\n      >\r\n        Game rulle\r\n      </span>\r\n      <div className=\"text-left max-w-mx text-gray-400\" hidden={!isOpen}>\r\n        <p>You're have several solo ships.</p>\r\n        <p>They are distributed randomly across the playing field.</p>\r\n        <p>Each player makes one move.</p>\r\n        <p>Knock out all the ships from the enemy field!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { GameConnect } from \"../connect/GameConnect\";\r\nimport { GameName } from \"./GameName\";\r\nimport { GameSettingsConnect } from \"../connect/GameSettingsConnect\";\r\nimport { Rulles } from \"./Rulles\";\r\n\r\ninterface BoardInterface {\r\n  play: boolean;\r\n}\r\n\r\nexport function Board({ play }: BoardInterface) {\r\n  return (\r\n    <div\r\n      className=\"\r\n        text-2xl\r\n        p-2 \r\n        h-screen\r\n        flex \r\n        flex-col \r\n        items-center \r\n        justify-center\r\n        text-center text-white\"\r\n    >\r\n      {play ? (\r\n        <GameConnect />\r\n      ) : (\r\n        <>\r\n          <GameName />\r\n          <div className=\"text-gray-400 -mt-4\">for two players</div>\r\n          <GameSettingsConnect />\r\n          <Rulles />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { Board } from \"../view/Board\";\r\n\r\nexport function BoardConnect() {\r\n  const board = useSelector(selectBoard);\r\n  return <Board play={board.play} />;\r\n}\r\n","export default function Background() {\r\n  return (\r\n    <>\r\n      <div\r\n        className={`\r\n        top-0 \r\n        back \r\n        fixed\r\n        h-screen \r\n        w-screen\r\n        bg-blue-900\r\n        \r\n        `}\r\n      ></div>\r\n      <div\r\n        className={`\r\n      top-0 \r\n      back \r\n      fixed\r\n      h-screen \r\n      w-screen\r\n      bg-gradient-to-b from-black via-blue-900 to-black\r\n      opacity-50\r\n      `}\r\n      ></div>\r\n      <div\r\n        className={`\r\n      top-0 \r\n      back \r\n      fixed\r\n      h-screen \r\n      w-screen\r\n      bg-gradient-to-r from-black via-gray-900 to-black\r\n      opacity-30\r\n      `}\r\n      ></div>\r\n    </>\r\n  );\r\n}\r\n","import { BoardConnect } from \"./board/connect/BoardConnect\";\nimport Background from \"./common/Background\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoardConnect />\n      <Background />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}